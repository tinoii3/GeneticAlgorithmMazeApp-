import sys
import numpy as np
import random
from PyQt5.QtWidgets import *
from PyQt5.QtCore import *
from PyQt5.QtGui import *
import matplotlib.pyplot as plt
import matplotlib
matplotlib.use('Qt5Agg')
from matplotlib.backends.backend_qt5agg import FigureCanvasQTAgg as FigureCanvas
from matplotlib.figure import Figure
import time

class MazePage(QWidget):
    def __init__(self, parent):
        super().__init__(parent)
        self.parent = parent
        self.figure = None
        self.canvas = None
        self.initUI()
        self.load_styles()
    
    def initUI(self):
        # ‡πÉ‡∏ä‡πâ QVBoxLayout ‡∏´‡∏•‡∏±‡∏Å
        main_layout = QVBoxLayout()
        main_layout.setContentsMargins(0, 0, 0, 0)
        main_layout.setSpacing(20)

        # Header Section
        self.header = QWidget(self)
        header_layout = QVBoxLayout(self.header)
        title_label = QLabel("Maze Solution")
        title_label.setObjectName("mazeTitle")
        header_layout.addWidget(title_label, alignment=Qt.AlignCenter)

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Container ‡∏™‡∏≥‡∏´‡∏£‡∏±‡∏ö‡∏Å‡∏£‡∏≤‡∏ü‡πÅ‡∏•‡∏∞‡∏Ç‡πâ‡∏≠‡∏Ñ‡∏ß‡∏≤‡∏°
        content_widget = QWidget()
        content_layout = QHBoxLayout(content_widget)
        content_layout.setContentsMargins(0, 0, 0, 0)
        content_layout.setSpacing(20)

        # Canvas Area (‡∏î‡πâ‡∏≤‡∏ô‡∏ã‡πâ‡∏≤‡∏¢)
        self.canvas_widget = QWidget()
        self.canvas_widget.setFixedSize(550, 500)
        self.canvas_layout = QVBoxLayout(self.canvas_widget)
        self.canvas_widget.setStyleSheet("""
            background-color: #3B4252;
            border: 2px solid #4C566A;
            border-radius: 15px;
        """)
        
        # Text Box (‡∏î‡πâ‡∏≤‡∏ô‡∏Ç‡∏ß‡∏≤)
        self.text_box = QTextEdit()
        self.text_box.setFixedWidth(400)
        self.text_box.setFixedHeight(500)
        self.text_box.setObjectName("genText")
        self.text_box.setStyleSheet("""
            QTextEdit {
                background-color: #3B4252;
                border: 2px solid #4C566A;
                border-radius: 15px;
                padding: 15px;
                color: #D8DEE9;
                font-size: 14px;
            }
        """)

        # ‡πÄ‡∏û‡∏¥‡πà‡∏° Widget ‡∏•‡∏á‡πÉ‡∏ô Layout ‡πÅ‡∏ô‡∏ß‡∏ô‡∏≠‡∏ô
        content_layout.addWidget(self.canvas_widget)
        content_layout.addWidget(self.text_box)

        # Control Button (‡∏≠‡∏¢‡∏π‡πà‡∏ô‡∏≠‡∏Å‡∏Å‡∏£‡∏≠‡∏ö‡∏Å‡∏£‡∏≤‡∏ü)
        self.btn_back = QPushButton("Back to Configuration")
        self.btn_back.setObjectName("mazeBtn")
        self.btn_back.clicked.connect(lambda: self.parent.stacked_widget.setCurrentIndex(1))

        # ‡πÄ‡∏û‡∏¥‡πà‡∏°‡∏ó‡∏±‡πâ‡∏á‡∏´‡∏°‡∏î‡∏•‡∏á Layout ‡∏´‡∏•‡∏±‡∏Å
        main_layout.addWidget(self.header)
        main_layout.addWidget(content_widget, stretch=1)
        main_layout.addWidget(self.btn_back, alignment=Qt.AlignCenter)

        self.setLayout(main_layout)
        

    def load_styles(self):
        # ‡∏õ‡∏£‡∏±‡∏ö‡∏™‡πÑ‡∏ï‡∏•‡πå‡∏Ç‡∏≠‡∏á widget ‡∏ï‡πà‡∏≤‡∏á‡πÜ ‡πÇ‡∏î‡∏¢‡∏™‡∏≤‡∏°‡∏≤‡∏£‡∏ñ‡πÅ‡∏Å‡πâ‡πÑ‡∏Ç‡∏Ñ‡πà‡∏≤ letter-spacing ‡∏Ç‡∏≠‡∏á‡∏´‡∏±‡∏ß‡∏Ç‡πâ‡∏≠‡πÑ‡∏î‡πâ‡∏ó‡∏µ‡πà‡∏ô‡∏µ‡πà
        self.setStyleSheet("""
            QLabel#mazeTitle {
                font-size: 42px;
                font-weight: 300;
                margin-top: 40px;
            }
            QPushButton#mazeBtn {
                background-color: #3B4252;
                color: #ECEFF4;
                border: 2px solid #4C566A;
                border-radius: 10px;
                padding: 15px;
                min-width: 250px;
                font-size: 18px;
                margin-bottom: 60px;
            }
            QPushButton#mazeBtn:hover {
                background-color: #434C5E;
                border-color: #5E81AC;
            }
        """)
    
    def initialize(self, params):
        """
        ‡∏£‡∏±‡∏ö‡∏û‡∏≤‡∏£‡∏≤‡∏°‡∏¥‡πÄ‡∏ï‡∏≠‡∏£‡πå‡∏Å‡∏≤‡∏£‡∏ó‡∏≥‡∏á‡∏≤‡∏ô‡∏à‡∏≤‡∏Å ModelCreationPage ‡πÅ‡∏•‡∏∞‡∏î‡∏≥‡πÄ‡∏ô‡∏¥‡∏ô‡∏Å‡∏≤‡∏£‡∏´‡∏≤‡πÄ‡∏™‡πâ‡∏ô‡∏ó‡∏≤‡∏á‡∏ó‡∏µ‡πà‡∏î‡∏µ‡∏ó‡∏µ‡πà‡∏™‡∏∏‡∏î‡∏î‡πâ‡∏ß‡∏¢ Genetic Algorithm
        ‡πÅ‡∏•‡πâ‡∏ß‡πÅ‡∏™‡∏î‡∏á‡∏ú‡∏•‡∏Å‡∏£‡∏≤‡∏ü‡∏†‡∏≤‡∏¢‡πÉ‡∏ô‡∏´‡∏ô‡πâ‡∏≤ MazePage
        """
        self.text_box.clear()  # ‡∏•‡πâ‡∏≤‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÄ‡∏Å‡πà‡∏≤
        self.text_box.insertHtml("<h3 style='color:#88C0D0;'>üöÄ Starting Genetic </h3> <p></p>")

        score = []
        pop_num = []
        
        start_time = time.time()
        pop_size = params['pop_size']
        grid_size = params['grid_size']
        mutation_rate = params['mutation_rate']
        generation_limit = params['generation_limit']

        # ‡∏™‡∏£‡πâ‡∏≤‡∏á Grid ‡πÅ‡∏•‡∏∞‡∏Å‡∏≥‡∏´‡∏ô‡∏î‡∏Ñ‡πà‡∏≤ Weight
        weights = np.random.randint(1, 11, size=(grid_size, grid_size))

        # --- ‡∏ü‡∏±‡∏á‡∏Å‡πå‡∏ä‡∏±‡∏ô‡πÉ‡∏ô‡∏™‡πà‡∏ß‡∏ô‡∏Ç‡∏≠‡∏á Genetic Algorithm ---
        def create_individual():
            individual = ['R'] * (grid_size - 1) + ['D'] * (grid_size - 1)
            random.shuffle(individual)
            return individual

        def calculate_fitness(individual):
            x, y = 0, 0

            score.clear()
            pop_num.clear()
            
            total = weights[y][x]
            score.append(weights[y][x])

            for move in individual:
                if move == 'R' and x < grid_size - 1:
                    x += 1
                elif move == 'D' and y < grid_size - 1:
                    y += 1

                score.append(weights[y][x])
                total += weights[y][x]

            score_values = list(map(int, score))
            pop_num.append(score_values)

            return total

        def repair_path(child):
            r_count = child.count('R')
            d_count = child.count('D')
            
            while r_count > grid_size - 1:
                idx = random.choice([i for i, g in enumerate(child) if g == 'R'])
                child[idx] = 'D'
                r_count -= 1
                d_count += 1
            
            while d_count > grid_size - 1:
                idx = random.choice([i for i, g in enumerate(child) if g == 'D'])
                child[idx] = 'R'
                d_count -= 1
                r_count += 1
            
            return child

        def crossover(parent1, parent2):
            size = len(parent1)
            start, end = sorted(random.sample(range(size), 2))
            child = [None] * size
            child[start:end] = parent1[start:end]
            
            remaining = []
            for gene in parent2:
                if child[start:end].count(gene) < parent2.count(gene):
                    remaining.append(gene)
            ptr = 0
            for i in range(size):
                if child[i] is None:
                    child[i] = remaining[ptr]
                    ptr += 1
            return repair_path(child)

        def mutate(individual, mutation_rate=0.1):
            if random.random() < mutation_rate:
                idx1, idx2 = random.sample(range(len(individual)), 2)
                individual[idx1], individual[idx2] = individual[idx2], individual[idx1]
            return repair_path(individual)

        def plot_path(path, title_str, path_str):
            # ‡∏Ñ‡∏≥‡∏ô‡∏ß‡∏ì‡∏ï‡∏≥‡πÅ‡∏´‡∏ô‡πà‡∏á‡∏à‡∏∏‡∏î‡∏ó‡∏µ‡πà‡πÄ‡∏î‡∏¥‡∏ô‡∏ó‡∏≤‡∏á
            x, y = 0, 0
            path_x = [x]
            path_y = [y]
            for move in path:
                if move == 'R':
                    x += 1
                elif move == 'D':
                    y += 1
                
                path_x.append(x)
                path_y.append(y)
            
            # ‡∏´‡∏≤‡∏Å‡∏°‡∏µ Canvas ‡∏≠‡∏¢‡∏π‡πà‡πÅ‡∏•‡πâ‡∏ß ‡πÉ‡∏´‡πâ‡πÄ‡∏Ñ‡∏•‡∏µ‡∏¢‡∏£‡πå‡∏≠‡∏≠‡∏Å‡∏à‡∏≤‡∏Å layout ‡∏Å‡πà‡∏≠‡∏ô
            if self.canvas is not None:
                for i in reversed(range(self.canvas_layout.count())):
                    widget_to_remove = self.canvas_layout.itemAt(i).widget()
                    if widget_to_remove is not None:
                        widget_to_remove.setParent(None)
            
            # ‡∏™‡∏£‡πâ‡∏≤‡∏á Figure ‡πÅ‡∏•‡∏∞ Canvas ‡πÉ‡∏´‡∏°‡πà
            self.figure = Figure(figsize=(12, 12))
            self.figure.subplots_adjust(top=0.80)
            self.figure.set_facecolor('#3B4252')
            self.canvas = FigureCanvas(self.figure)
            self.canvas.setStyleSheet("""
                border: 2px solid #444;
                border-radius: 15px;
            """)
            self.canvas_layout.addWidget(self.canvas)
            ax = self.figure.add_subplot(111)
            
            im = ax.imshow(weights, cmap='viridis', origin='upper')
            # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡∏≠‡∏±‡∏Å‡∏©‡∏£‡πÉ‡∏ô colorbar ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß
            cbar = self.figure.colorbar(im, ax=ax)
            cbar.ax.tick_params(labelcolor='white')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏Ç‡∏≠‡∏á‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡πÉ‡∏ô colorbar ‡πÄ‡∏õ‡πá‡∏ô‡∏™‡∏µ‡∏Ç‡∏≤‡∏ß

            ax.plot(path_x, path_y, 'r-', linewidth=2)
            ax.scatter(path_x, path_y, c='red', s=50)
            
            ax.set_title(title_str, fontsize=16, pad=35, color='white')
            ax.text(0.5, 1.02, path_str, transform=ax.transAxes,
                    ha='center', fontsize=8, color='white')
            
            ax.tick_params(axis='x', labelcolor='white')  # ‡πÄ‡∏õ‡∏•‡∏µ‡πà‡∏¢‡∏ô‡∏™‡∏µ‡∏ï‡∏±‡∏ß‡πÄ‡∏•‡∏Ç‡∏ó‡∏µ‡πà‡πÅ‡∏™‡∏î‡∏á‡∏ö‡∏ô‡πÅ‡∏Å‡∏ô X
            ax.tick_params(axis='y', labelcolor='white')

            self.canvas.draw()

        # --- ‡πÄ‡∏£‡∏¥‡πà‡∏°‡∏ï‡πâ‡∏ô Population ---
        population = [create_individual() for _ in range(pop_size)]
        best_individual = None
        best_fitness = float('inf')

        for generation in range(generation_limit):
            population = sorted(population, key=calculate_fitness)
            current_best = population[0]
            current_best_fitness = calculate_fitness(current_best)

            # ‡πÅ‡∏™‡∏î‡∏á‡∏Ç‡πâ‡∏≠‡∏°‡∏π‡∏•‡πÉ‡∏ô Text Box
            gen_info = f"""
            <div style='margin-bottom: 15px;'>
                <span style='color:#88C0D0; font-weight:bold;'>Generation {generation+1}</span>
                <br>
                ‚ñ∏ Population: <span style='color:#A3BE8C;'>{pop_num}</span>
                <br>
                ‚ñ∏ Best Fitness: <span style='color:#EBCB8B;'>{current_best_fitness}</span>
                <br>
                <br>
            </div>
            """
            self.text_box.insertHtml(gen_info)
            
            # ‡πÄ‡∏•‡∏∑‡πà‡∏≠‡∏ô Scroll ‡πÑ‡∏õ‡∏î‡πâ‡∏≤‡∏ô‡∏•‡πà‡∏≤‡∏á‡∏≠‡∏±‡∏ï‡πÇ‡∏ô‡∏°‡∏±‡∏ï‡∏¥
            self.text_box.verticalScrollBar().setValue(
                self.text_box.verticalScrollBar().maximum()
            )
            QApplication.processEvents()

            if current_best_fitness < best_fitness:
                best_fitness = current_best_fitness
                best_individual = current_best

            new_population = [current_best]
            while len(new_population) < pop_size:
                parents = random.sample(population[:max(2, pop_size // 2)], 2)
                child = crossover(parents[0], parents[1])
                child = mutate(child, mutation_rate)
                new_population.append(child)
            population = new_population

        # (Your genetic algorithm code here)
        end_time = time.time()
        execution_time = end_time - start_time

        # ‡∏´‡∏•‡∏±‡∏á‡∏à‡∏≤‡∏Å‡∏•‡∏π‡∏õ Generation ‡∏´‡∏°‡∏î‡πÅ‡∏•‡πâ‡∏ß
        summary_html = f"""
        <div style='margin-top: 20px; padding: 15px; background-color: #434C5E; border-radius: 10px;'>
            <h4 style='color:#A3BE8C; margin:0;'>‚úÖ Completed</h4>
            <p style='margin:5px 0;'>
                ‚ñ∏ Total Generations: {generation_limit}<br>
                ‚ñ∏ Final Best Fitness: <strong>{best_fitness}</strong><br>
                ‚ñ∏ Execution Time: {execution_time:.2f} seconds
            </p>
        </div>
        """
        self.text_box.insertHtml(summary_html)

        # (‡∏ñ‡πâ‡∏≤‡∏ï‡πâ‡∏≠‡∏á‡∏Å‡∏≤‡∏£‡πÅ‡∏ö‡πà‡∏á‡∏ö‡∏£‡∏£‡∏ó‡∏±‡∏î‡∏Ç‡∏≠‡∏á best_individual ‡πÉ‡∏ô‡∏ö‡∏≤‡∏á‡∏Å‡∏£‡∏ì‡∏µ)
        # if len(best_individual) > 16:
        #     best_individual = "".join(best_individual[:16]) + "\n" + "".join(best_individual[16:])
        
        best_individual = "".join(best_individual) + "\n"
        
        title_plot = f"Best Maze Path - Fitness: {best_fitness}"
        path_plot = f"Best Path: {''.join(best_individual)}"
        plot_path(best_individual, title_plot, path_plot)